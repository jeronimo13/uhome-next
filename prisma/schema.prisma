// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  lastLoginAt   DateTime  @default(now()) @map(name: "last_login_at")
  orders        Order[]
  addresses     Address[]
  phoneNumber   String?
  cart          Cart?

  @@map(name: "users")
  Transaction Transaction[]
}

model Cart {
  id          String     @id @default(cuid())
  userId      String     @unique
  //sessionId
  token       String     @unique @default(cuid())
  firstName   String?
  lastName    String?
  email       String?
  phoneNumber String?
  street      String?
  city        String?
  region      String?
  zipCode     String?
  content     String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  cartId    String
  SKU       String
  price     Decimal
  discount  Decimal
  quantity  Int

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  orderId   String
  SKU       String
  price     Decimal
  discount  Decimal @default(0)
  quantity  Int

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  NEW
  CHECKOUT
  PAID
  FAILED
  SHIPPED
  DELIVERED
  RETURNED
  CANCELLED
}

model Order {
  id            String        @id @default(cuid())
  userId        String?
  user          User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  // sessionId
  token         String        @unique @default(cuid())
  status        OrderStatus   @default(NEW)
  subtotal      Decimal
  itemsDiscount Decimal       @default(0)
  tax           Decimal       @default(0)
  shipping      Decimal       @default(0)
  total         Decimal
  promoCode     String?
  discount      Decimal       @default(0)
  grandTotal    Decimal
  firstName     String
  lastName      String
  email         String
  phoneNumber   String
  street        String
  city          String
  region        String
  zipCode       String
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @updatedAt @map(name: "updated_at")
  items         OrderItem[]
  transactions   Transaction[]
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TranscationMode {
  OFFLINE
  CASH_ON_DELIVERY
  WIRE_TRANSFER
  WIRE_CARD
  ONLINE
}

enum TransactionStatus {
  NEW
  PENDING // user started payment but not completed
  CANCELLED // cancelled by user
  FAILED // failed by payment gateway
  REJECTED // rejected by payment gateway
  SUCCESS
}

model Transaction {
  id        String            @id @default(cuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId   String
  order     Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  code      String
  type      TransactionType   @default(DEBIT)
  mode      TranscationMode
  status    TransactionStatus @default(NEW)
  createdAt DateTime          @default(now()) @map(name: "created_at")
  updatedAt DateTime          @updatedAt @map(name: "updated_at")
}

model Address {
  id      String @id @default(cuid())
  userId  String
  street  String
  city    String
  region  String
  zipCode String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id           String              @id @default(cuid())
  code         Int                 @unique @default(autoincrement())
  title        String
  metaTitle    String
  slug         String
  summary      String
  description  String?
  SKU          String
  price        Decimal
  discount     Decimal             @default(0)
  quantity     Int
  imgUrl       String
  categories   CategoryOnProduct[]
  TagOnProduct TagOnProduct[]
  CartItem     CartItem[]
  OrderItem    OrderItem[]
}

model Category {
  id               String              @id @default(cuid())
  parentCategoryId String?
  title            String
  metaTitle        String
  slug             String
  imgUrl           String
  products         CategoryOnProduct[]

  parent   Category?  @relation("ParentCategory", fields: [parentCategoryId], references: [id], onDelete: Cascade)
  children Category[] @relation("ParentCategory")
  @@unique([slug])
}

model CategoryOnProduct {
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@id([productId, categoryId])
}

model Tag {
  id           String         @id @default(cuid())
  title        String
  metaTitle    String
  slug         String
  TagOnProduct TagOnProduct[]

  @@unique([slug])
}

model TagOnProduct {
  product   Product @relation(fields: [productId], references: [id])
  productId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@id([productId, tagId])
}
